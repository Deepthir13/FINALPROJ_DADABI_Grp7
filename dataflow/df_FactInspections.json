{
	"name": "df_FactInspections",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_StageChicago",
						"type": "DatasetReference"
					},
					"name": "stageChicago"
				},
				{
					"dataset": {
						"referenceName": "ds_StageDallas",
						"type": "DatasetReference"
					},
					"name": "stageDallas"
				},
				{
					"dataset": {
						"referenceName": "ds_FactInspections",
						"type": "DatasetReference"
					},
					"name": "FactInspectionMaxId"
				},
				{
					"dataset": {
						"referenceName": "ds_FactInspections",
						"type": "DatasetReference"
					},
					"name": "FactInspection"
				},
				{
					"dataset": {
						"referenceName": "ds_DimRestaurant",
						"type": "DatasetReference"
					},
					"name": "DimRestaurant"
				},
				{
					"dataset": {
						"referenceName": "ds_DimLocation",
						"type": "DatasetReference"
					},
					"name": "DimLocation"
				},
				{
					"dataset": {
						"referenceName": "ds_DimInspection",
						"type": "DatasetReference"
					},
					"name": "DimInspection"
				},
				{
					"dataset": {
						"referenceName": "ds_DimRisk",
						"type": "DatasetReference"
					},
					"name": "DimRisk"
				},
				{
					"dataset": {
						"referenceName": "ds_DimResults",
						"type": "DatasetReference"
					},
					"name": "DimResult"
				},
				{
					"dataset": {
						"referenceName": "ds_DimViolation",
						"type": "DatasetReference"
					},
					"name": "DimViolation"
				},
				{
					"dataset": {
						"referenceName": "ds_DimDate",
						"type": "DatasetReference"
					},
					"name": "DimDate"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "union1"
				},
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "select2"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "select3"
				},
				{
					"name": "join4"
				},
				{
					"name": "join5"
				},
				{
					"name": "join6"
				},
				{
					"name": "join7"
				},
				{
					"name": "join8"
				},
				{
					"name": "join9"
				},
				{
					"name": "selectXXXXX"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Job_Id as string ('59')",
				"}",
				"source(output(",
				"          INSPECTION_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          LICENSE_NUM as decimal(38,0),",
				"          FACILITY_TYPE as string,",
				"          RISK as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP_CODE as string,",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_TYPE as string,",
				"          RESULTS as string,",
				"          VIOLATIONS_INFO as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          LOCATION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> stageChicago",
				"source(output(",
				"          ROWID as decimal(38,0),",
				"          RESTAURANT_NAME as string,",
				"          ALSO_KNOWN_AS_NAME as string,",
				"          LICENSE_NUM as decimal(38,0),",
				"          FACILITY_TYPE as string,",
				"          RISK as string,",
				"          STREET_ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP_CODE as string,",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_TYPE as string,",
				"          RESULTS as string,",
				"          VIOLATIONS_INFO as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          LOCATION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> stageDallas",
				"source(output(",
				"          MAXFACTSK as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select NVL(MAX(FACT_INSPECTION_ID_SK),0) as MaxFactSK FROM CD_SCHEMA.FACT_INSPECTION',",
				"     format: 'query') ~> FactInspectionMaxId",
				"source(output(",
				"          FACT_INSPECTION_ID_SK as decimal(38,0),",
				"          RESTAURANT_ID_SK as decimal(38,0),",
				"          LOCATION_ID_SK as decimal(38,0),",
				"          INSPECTION_ID_SK as decimal(38,0),",
				"          RISK_ID_SK as decimal(38,0),",
				"          DATE_ID_SK as decimal(38,0),",
				"          RESULT_ID_SK as decimal(38,0),",
				"          VIOLATION_ID_SK as decimal(38,0),",
				"          VIOLATION_INFO as string,",
				"          INSPECTION_CNT as decimal(38,0),",
				"          DATA_SOURCE_ID as string,",
				"          DATA_WORKFLOW_NAME as string,",
				"          DW_JOB_ID as string,",
				"          DW_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> FactInspection",
				"source(output(",
				"          RESTAURANT_ID_SK as decimal(38,0),",
				"          RESTAURANT_NAME as string,",
				"          ALSO_KNOWN_AS_NAME as string,",
				"          LICENSE_NUMBER as decimal(38,0),",
				"          FACILITY_TYPE as string,",
				"          DATA_SOURCE_ID as string,",
				"          DATA_WORKFLOW_NAME as string,",
				"          DW_JOB_ID as string,",
				"          DW_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> DimRestaurant",
				"source(output(",
				"          LOCATION_ID_SK as decimal(38,0),",
				"          STREET_ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          LOCATION as string,",
				"          DATA_SOURCE_ID as string,",
				"          DATA_WORKFLOW_NAME as string,",
				"          DW_JOB_ID as string,",
				"          DW_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> DimLocation",
				"source(output(",
				"          INSPECTION_ID_SK as decimal(38,0),",
				"          INSPECTION_TYPE as string,",
				"          DATA_SOURCE_ID as string,",
				"          DATA_WORKFLOW_NAME as string,",
				"          DW_JOB_ID as string,",
				"          DW_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> DimInspection",
				"source(output(",
				"          RISK_ID_SK as decimal(38,0),",
				"          RISK_LEVEL as string,",
				"          DATA_SOURCE_ID as string,",
				"          DATA_WORKFLOW_NAME as string,",
				"          DW_JOB_ID as string,",
				"          DW_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> DimRisk",
				"source(output(",
				"          RESULT_ID_SK as decimal(38,0),",
				"          INSPECTION_RESULTS as string,",
				"          DATA_SOURCE_ID as string,",
				"          DATA_WORKFLOW_NAME as string,",
				"          DW_JOB_ID as string,",
				"          DW_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> DimResult",
				"source(output(",
				"          VIOLATION_ID_SK as decimal(38,0),",
				"          VIOLATION_CODE as string,",
				"          VIOLATION_DESCRIPTION as string,",
				"          DATA_SOURCE_ID as string,",
				"          DATA_WORKFLOW_NAME as string,",
				"          DW_JOB_ID as string,",
				"          DW_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> DimViolation",
				"source(output(",
				"          DATE_ID_SK as decimal(38,0),",
				"          DAY_NUM as decimal(2,0),",
				"          DAY_NAME as string,",
				"          DAY_ABBR as string,",
				"          IS_WEEKEND as decimal(2,0),",
				"          MONTH_NAME as string,",
				"          MONTH_ABBR as string,",
				"          MONTH_NUM as string,",
				"          DT as date,",
				"          YEAR_NUM as decimal(4,0),",
				"          DATA_SOURCE_ID as string,",
				"          DATA_WORKFLOW_NAME as string,",
				"          DW_JOB_ID as string,",
				"          DW_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> DimDate",
				"stageChicago derive(DATA_SOURCE_ID = 'Chicago23') ~> derivedColumn1",
				"stageDallas derive(DATA_SOURCE_ID = 'Dallas23') ~> derivedColumn2",
				"derivedColumn1, derivedColumn2 union(byName: false)~> union1",
				"union1, FactInspectionMaxId join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(MAXFACTSK,",
				"          VIOLATIONS_INFO,",
				"          DATA_SOURCE_ID),",
				"     CountRow = count(INSPECTION_ID)) ~> aggregate1",
				"aggregate1, FactInspection join(VIOLATIONS_INFO == VIOLATION_INFO,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"union1, DimRestaurant join(DBA_NAME == RESTAURANT_NAME",
				"     && AKA_NAME == ALSO_KNOWN_AS_NAME",
				"     && LICENSE_NUM == LICENSE_NUMBER",
				"     && union1@FACILITY_TYPE == DimRestaurant@FACILITY_TYPE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join2 select(mapColumn(",
				"          MAXFACTSK,",
				"          VIOLATION_INFO = VIOLATIONS_INFO,",
				"          DATA_SOURCE_ID = aggregate1@DATA_SOURCE_ID,",
				"          CountRow,",
				"          FACT_INSPECTION_ID_SK,",
				"          DATA_SOURCE_ID = FactInspection@DATA_SOURCE_ID,",
				"          RESTAURANT_ID_SK,",
				"          LOCATION_ID_SK,",
				"          INSPECTION_ID_SK,",
				"          RISK_ID_SK,",
				"          DATE_ID_SK,",
				"          RESULT_ID_SK,",
				"          VIOLATION_ID_SK",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(FACT_INSPECTION_ID_SK = MAXFACTSK+RowNum,",
				"          DW_JOB_ID = $Job_Id,",
				"          DW_LOAD_DT = currentDate(),",
				"          DATA_WORKFLOW_NAME = 'df_FactInspection') ~> derivedColumn3",
				"derivedColumn3 select(mapColumn(",
				"          XFACT_INSPECTION_ID_SK = FACT_INSPECTION_ID_SK,",
				"          xRESTAURANT_ID_SK = RESTAURANT_ID_SK,",
				"          xLOCATION_ID_SK = LOCATION_ID_SK,",
				"          xINSPECTION_ID_SK = INSPECTION_ID_SK,",
				"          xRISK_ID_SK = RISK_ID_SK,",
				"          xDATE_ID_SK = DATE_ID_SK,",
				"          xRESULT_ID_SK = RESULT_ID_SK,",
				"          xVIOLATION_ID_SK = VIOLATION_ID_SK,",
				"          xVIOLATION_INFO = VIOLATION_INFO,",
				"          xDATA_SOURCE_ID = DATA_SOURCE_ID,",
				"          xDATA_WORKFLOW_NAME = DATA_WORKFLOW_NAME,",
				"          xDW_JOB_ID = DW_JOB_ID,",
				"          xDW_LOAD_DT = DW_LOAD_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"join3, DimLocation join(ADDRESS == STREET_ADDRESS",
				"     && union1@STATE == DimLocation@STATE",
				"     && union1@CITY == DimLocation@CITY",
				"     && ZIP_CODE == ZIP",
				"     && union1@LATITUDE == DimLocation@LATITUDE",
				"     && union1@LONGITUDE == DimLocation@LONGITUDE",
				"     && union1@LOCATION == DimLocation@LOCATION,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4, DimInspection join(union1@INSPECTION_TYPE == DimInspection@INSPECTION_TYPE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"join5, DimRisk join(RISK == RISK_LEVEL,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join6",
				"join6, DimDate join(INSPECTION_DATE == DT,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join7",
				"join7, DimResult join(RESULTS == INSPECTION_RESULTS,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join8",
				"join8, DimViolation join(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     joinType:'right',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join9",
				"join9 select(mapColumn(",
				"          each(match(/* All input columns */ true()),",
				"               /* Input name */ $$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectXXXXX"
			]
		}
	}
}